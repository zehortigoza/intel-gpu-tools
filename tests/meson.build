test_progs = [
	'core_auth',
	'core_getclient',
	'core_getstats',
	'core_getversion',
	'core_hotunplug',
	'core_setmaster',
	'core_setmaster_vs_auth',
	'dmabuf',
	'dmabuf_sync_file',
	'device_reset',
	'dumb_buffer',
	'drm_buddy',
	'drm_mm',
	'drm_read',
	'fbdev',
	'kms_3d',
	'kms_addfb_basic',
	'kms_async_flips',
	'kms_atomic',
	'kms_atomic_interruptible',
	'kms_atomic_transition',
	'kms_bw',
	'kms_color',
	'kms_concurrent',
	'kms_content_protection',
	'kms_cursor_crc',
	'kms_cursor_edge_walk',
	'kms_cursor_legacy',
	'kms_dither',
	'kms_display_modes',
	'kms_dp_aux_dev',
	'kms_feature_discovery',
	'kms_flip',
	'kms_flip_event_leak',
	'kms_force_connector_basic',
	'kms_getfb',
	'kms_hdmi_inject',
	'kms_hdr',
	'kms_invalid_mode',
	'kms_lease',
	'kms_multipipe_modeset',
	'kms_panel_fitting',
	'kms_pipe_crc_basic',
	'kms_plane',
	'kms_plane_alpha_blend',
	'kms_plane_cursor',
	'kms_plane_lowres',
	'kms_plane_multiple',
	'kms_plane_scaling',
	'kms_prime',
	'kms_prop_blob',
	'kms_properties',
	'kms_rmfb',
	'kms_rotation_crc',
	'kms_scaling_modes',
	'kms_selftest',
	'kms_sequence',
	'kms_setmode',
	'kms_sysfs_edid_timing',
	'kms_tiled_display',
	'kms_tv_load_detect',
	'kms_universal_plane',
	'kms_vblank',
	'kms_vrr',
	'kms_writeback',
	'meta_test',
	'panfrost_get_param',
	'panfrost_gem_new',
	'panfrost_prime',
	'panfrost_submit',
	'prime_udl',
	'prime_vgem',
	'sriov_basic',
	'syncobj_basic',
	'syncobj_eventfd',
	'syncobj_wait',
	'syncobj_timeline',
	'sw_sync',
	'template',
	'testdisplay',
	'tools_test',
	'vgem_basic',
	'vgem_slow',
]

intel_i915_xe_progs = [
	'api_intel_allocator',
	'intel_hwmon',
]

intel_i915_progs = [
	'api_intel_bb',
	'debugfs_test',
	'drm_fdinfo',
	'gen3_mixed_blits',
	'gen3_render_linear_blits',
	'gen3_render_mixed_blits',
	'gen3_render_tiledx_blits',
	'gen3_render_tiledy_blits',
	'gem_bad_reloc',
	'gem_barrier_race',
	'gem_basic',
	'gem_blits',
	'gem_busy',
	'gem_caching',
	'gem_create',
	'gem_ccs',
	'gem_close',
	'gem_close_race',
	'gem_compute',
	'gem_concurrent_blit',
	'gem_cs_tlb',
	'gem_ctx_bad_destroy',
	'gem_ctx_create',
	'gem_ctx_engines',
	'gem_ctx_exec',
	'gem_ctx_freq',
	'gem_ctx_isolation',
	'gem_ctx_param',
	'gem_ctx_persistence',
	'gem_ctx_shared',
	'gem_ctx_sseu',
	'gem_ctx_switch',
	'gem_eio',
	'gem_evict_alignment',
	'gem_evict_everything',
	'gem_exec_alignment',
	'gem_exec_async',
	'gem_exec_await',
	'gem_exec_balancer',
	'gem_exec_basic',
	'gem_exec_big',
	'gem_exec_capture',
	'gem_exec_create',
	'gem_exec_endless',
	'gem_exec_fair',
	'gem_exec_fence',
	'gem_exec_flush',
	'gem_exec_gttfill',
	'gem_exec_latency',
	'gem_exec_lut_handle',
	'gem_exec_nop',
	'gem_exec_parallel',
	'gem_exec_params',
	'gem_exercise_blt',
	'gen7_exec_parse',
	'gen9_exec_parse',
	'gem_exec_reloc',
	'gem_exec_schedule',
	'gem_exec_store',
	'gem_exec_suspend',
	'gem_exec_whisper',
	'gem_fd_exhaustion',
	'gem_fence_thrash',
	'gem_fence_upload',
	'gem_fenced_exec_thrash',
	'gem_flink_basic',
	'gem_flink_race',
	'gem_gpgpu_fill',
	'gem_gtt_cpu_tlb',
	'gem_gtt_hog',
	'gem_gtt_speed',
	'gem_huc_copy',
	'gem_linear_blits',
	'gem_lmem_evict',
	'gem_lmem_swapping',
	'gem_lut_handle',
	'gem_madvise',
	'gem_media_fill',
	'gem_media_vme',
	'gem_mmap',
	'gem_mmap_gtt',
	'gem_mmap_offset',
	'gem_mmap_wc',
	'gem_partial_pwrite_pread',
	'gem_pipe_control_store_loop',
	'gem_ppgtt',
	'gem_pread',
	'gem_pread_after_blit',
	'gem_pwrite',
	'gem_pwrite_snooped',
	'gem_pxp',
	'gem_read_read_speed',
	'gem_readwrite',
	'gem_reg_read',
	'gem_render_copy',
	'gem_render_copy_redux',
	'gem_render_linear_blits',
	'gem_render_tiled_blits',
	'gem_request_retire',
	'gem_reset_stats',
	'gem_ringfill',
	'gem_set_tiling_vs_blt',
	'gem_set_tiling_vs_gtt',
	'gem_set_tiling_vs_pwrite',
	'gem_shrink',
	'gem_softpin',
	'gem_spin_batch',
	'gem_streaming_writes',
	'gem_sync',
	'gem_tiled_blits',
	'gem_tiled_fence_blits',
	'gem_tiled_partial_pwrite_pread',
	'gem_tiled_pread_basic',
	'gem_tiled_pread_pwrite',
	'gem_tiled_swapping',
	'gem_tiled_wb',
	'gem_tiled_wc',
	'gem_tiling_max_stride',
	'gem_unfence_active_buffers',
	'gem_unref_active_buffers',
	'gem_userptr_blits',
	'gem_vm_create',
	'gem_wait',
	'gem_watchdog',
	'gem_workarounds',
	'perf',
	'perf_pmu',
	'i915_fb_tiling',
	'i915_getparams_basic',
	'i915_pm_freq_api',
	'i915_hangman',
	'i915_module_load',
	'i915_pciid',
	'i915_pipe_stress',
	'i915_pm_freq_mult',
	'i915_pm_rpm',
	'i915_pm_rc6_residency',
	'i915_pm_rps',
	'i915_pm_sseu',
	'i915_power',
	'i915_query',
	'i915_selftest',
	'i915_suspend',
	'prime_busy',
	'prime_mmap',
	'prime_mmap_coherency',
	'prime_mmap_kms',
	'prime_self_import',
	'sysfs_defaults',
	'sysfs_heartbeat_interval',
	'sysfs_preempt_timeout',
	'sysfs_timeslice_duration',
]

intel_kms_progs = [
	'kms_big_fb',
	'kms_big_joiner' ,
	'kms_busy',
	'kms_ccs',
	'kms_cdclk',
	'kms_dirtyfb',
	'kms_draw_crc',
	'kms_dsc',
	'kms_fb_coherency',
	'kms_fbcon_fbt',
	'kms_fence_pin_leak',
	'kms_flip_scaled_crc',
	'kms_flip_tiling',
	'kms_frontbuffer_tracking',
	'kms_legacy_colorkey',
	'kms_mmap_write_crc',
	'kms_pipe_b_c_ivb',
	'kms_pm_backlight',
	'kms_pm_dc',
	'kms_pm_lpsp',
	'kms_pm_rpm',
	'kms_psr',
	'kms_psr2_sf',
	'kms_psr2_su',
	'kms_psr_stress_test',
	'kms_pwrite_crc',
]

intel_xe_progs = [
	'xe_wedged',
	'xe_ccs',
	'xe_create',
	'xe_compute',
	'xe_compute_preempt',
	'xe_copy_basic',
	'xe_dma_buf_sync',
	'xe_debugfs',
	'xe_drm_fdinfo',
	'xe_evict',
	'xe_evict_ccs',
	'xe_exec_atomic',
	'xe_exec_balancer',
	'xe_exec_basic',
	'xe_exec_compute_mode',
	'xe_exec_fault_mode',
	'xe_exec_queue_property',
	'xe_exec_reset',
	'xe_exec_store',
	'xe_exec_threads',
	'xe_exercise_blt',
	'xe_gpgpu_fill',
	'xe_gt_freq',
	'xe_huc_copy',
	'xe_intel_bb',
	'xe_live_ktest',
	'xe_media_fill',
	'xe_mmap',
	'xe_module_load',
	'xe_noexec_ping_pong',
	'xe_oa',
	'xe_pat',
	'xe_peer2peer',
	'xe_pm',
	'xe_pm_residency',
	'xe_prime_self_import',
	'xe_query',
	'xe_render_copy',
	'xe_vm',
	'xe_waitfence',
	'xe_spin_batch',
	'xe_sysfs_defaults',
	'xe_sysfs_scheduler',
]

msm_progs = [
	'msm_mapping',
	'msm_recovery',
	'msm_shrink',
	'msm_submit',
	'msm_submitoverhead',
]

chamelium_progs = [
	'kms_chamelium_audio',
	'kms_chamelium_color',
	'kms_chamelium_edid',
	'kms_chamelium_frames',
	'kms_chamelium_hpd',
]

test_deps = [ igt_deps ]

if libdrm_nouveau.found()
	test_progs += [
		'prime_nv_api',
		'prime_nv_pcopy',
		'prime_nv_test',
		'nouveau_crc',
	]
	test_deps += libdrm_nouveau
endif

# Extra sources used on core and Intel drivers
extra_sources = {
	'core_hotunplug': [ 'core_hotunplug.c' ],
	'dumb_buffer': ['dumb_buffer.c' ],
	'testdisplay': [ 'testdisplay_hotplug.c' ],
	'kms_color':  [ 'kms_color_helper.c' ],
	'kms_chamelium_audio': [ join_paths ('chamelium', 'kms_chamelium_helper.c') ],
	'kms_chamelium_color':  [ 'kms_color_helper.c' ],
	'kms_chamelium_edid': [ join_paths ('chamelium', 'kms_chamelium_helper.c') ],
	'kms_chamelium_frames': [ join_paths ('chamelium', 'kms_chamelium_helper.c') ],
	'kms_chamelium_hpd': [ join_paths ('chamelium', 'kms_chamelium_helper.c') ],
	'kms_dsc': [ join_paths ('intel', 'kms_dsc_helper.c') ],
	'kms_psr2_sf':  [ join_paths ('intel', 'kms_dsc_helper.c') ],
}

# Extra dependencies used on core and Intel drivers
extra_dependencies = {
	'core_hotunplug': [ lib_igt_i915_perf ],
	'drm_fdinfo': [ lib_igt_drm_fdinfo ],
	'dumb_buffer':  [ libatomic ],
	'gem_barrier_race': [ lib_igt_i915_perf ],
	'gem_create': [ libatomic ],
	'gem_ctx_freq': [ lib_igt_perf ],
	'gem_ctx_sseu': [ lib_igt_perf ],
	'gem_eio': [ realtime ],
	'gem_exec_balancer': [ lib_igt_perf ],
	'gem_mmap_offset': [ libatomic ],
	'i915_pm_freq_mult': [ lib_igt_perf ],
	'i915_pm_rc6_residency': [ lib_igt_perf ],
	'perf': [ lib_igt_i915_perf ],
	'perf_pmu':  [ lib_igt_perf ],
	'sw_sync': [ libatomic ],
	'xe_oa': [ lib_igt_xe_oa ],
}

test_executables = []
test_list = []
testlist_files = []

foreach prog : test_progs
	testexe = executable(prog, [prog + '.c'] + extra_sources.get(prog, []),
		   dependencies : test_deps + extra_dependencies.get(prog, []),
		   install_dir : libexecdir,
		   install_rpath : libexecdir_rpathdir,
		   install : true)
	test_executables += testexe
	test_list += prog
	name = prog.split('/').get(-1)
	if not meson.is_cross_build()
		testlist_files += custom_target(name + '.testlist',
			    build_by_default : true,
			    command : [testexe, '--show-testlist'],
			    capture : true,
			    output : name + '.testlist')
	endif
endforeach

intel_progs = intel_i915_xe_progs
intel_progs += intel_i915_progs + intel_kms_progs
if build_xe
	build_info += 'Xe **experimental** tests enabled.'
	intel_progs += intel_xe_progs
endif

foreach prog : intel_progs
	testexe = executable(prog,
		   [join_paths('intel', prog + '.c')] + extra_sources.get(prog, []),
		   dependencies : test_deps + extra_dependencies.get(prog, []),
		   install_dir : libexecdir,
		   install_rpath : libexecdir_rpathdir,
		   install : true)
	test_executables += testexe
	test_list += prog
	name = prog.split('/').get(-1)
	if not meson.is_cross_build()
		testlist_files += custom_target(name + '.testlist',
			    build_by_default : true,
			    command : [testexe, '--show-testlist'],
			    capture : true,
			    output : name + '.testlist')
	endif
endforeach

foreach prog : msm_progs
	test_executables += executable(prog, join_paths('msm', prog + '.c'),
				       dependencies : test_deps,
				       install_dir : libexecdir,
				       install_rpath : libexecdir_rpathdir,
				       install : true)
	test_list += prog
endforeach

if chamelium.found()
	foreach prog : chamelium_progs
		testexe = executable(prog,
				 [join_paths('chamelium', prog + '.c')] + extra_sources.get(prog, []),
				 dependencies : test_deps + extra_dependencies.get(prog, []),
				 install_dir : libexecdir,
				 install_rpath : libexecdir_rpathdir,
				 install : true)
		test_list += prog
		test_executables += testexe
		name = prog.split('/').get(-1)
		if not meson.is_cross_build()
			testlist_files += custom_target(name + '.testlist',
				    build_by_default : true,
				    command : [testexe, '--show-testlist'],
				    capture : true,
				    output : name + '.testlist')
		endif
	endforeach
	test_deps += chamelium
endif

subdir('amdgpu')

subdir('v3d')

subdir('vc4')

subdir('vmwgfx')

gen_testlist = find_program('generate_testlist.sh')
test_list_target = custom_target('testlist',
	      output : 'test-list.txt',
	      command : [ gen_testlist, '@OUTPUT@', test_list ],
	      install : true,
	      install_dir : libexecdir)

test_executables += executable('gem_concurrent_all', 'intel/gem_concurrent_all.c',
	   dependencies : test_deps + [ libatomic ],
	   install_dir : libexecdir,
	   install_rpath : libexecdir_rpathdir,
	   install : true)
test_list += 'gem_concurrent_all'

test_list_full_target = custom_target('testlist-full',
	      output : 'test-list-full.txt',
	      command : [ gen_testlist, '@OUTPUT@', test_list ],
	      install : true,
	      install_dir : libexecdir)

test_script = find_program('igt_command_line.sh')
foreach prog : test_list
	test('testcase check ' + prog, test_script, args : prog)
endforeach

testexe = executable('gem_stress', 'intel/gem_stress.c',
	   install : true,
	   install_dir : libexecdir,
	   install_rpath : libexecdir_rpathdir,
	   dependencies : igt_deps)
if not meson.is_cross_build()
	testlist_files += custom_target('gem_stress.testlist',
			build_by_default : true,
			command : [testexe, '--show-testlist'],
			capture : true,
			output : 'gem_stress.testlist')
endif

image_files = [
  '1080p-left.png',
  '1080p-right.png',
  'pass.png',
]
install_data(sources : image_files, install_dir : datadir)

subdir('intel-ci')
